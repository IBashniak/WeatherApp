plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'jacoco'
    id "org.jlleitschuh.gradle.ktlint" version "10.2.0"
}

jacoco {
    toolVersion = "0.8.7"
}

android {
    compileSdkVersion 31

    buildFeatures {
        dataBinding true
    }

    defaultConfig {
        applicationId "com.ibashniak.weatherapp"
        minSdk 22
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

    testOptions {
        unitTests.all {
            animationsDisabled true
            jacoco {
                includeNoLocationClasses = true
                excludes = ['jdk.internal.*']
            }
        }
        unitTests.returnDefaultValues = true
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
        applicationVariants.all { variant ->
            variant.buildConfigField "String", "API_KEY", "\"" + getApiKey() + "\""
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        // Flag to enable support for the new language APIs
        coreLibraryDesugaringEnabled true

        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

}

ktlint {
    debug.set(true)
    disabledRules.set(["no-wildcard-imports"])
}

task installGitHook(type: Copy) {
    from new File(rootProject.rootDir, 'pre-commit')
    into { new File(rootProject.rootDir, '.git/hooks') }
    fileMode 0777
}
tasks.getByPath(':app:preBuild').dependsOn installGitHook

def getApiKey() {
    if (System.env.API_KEY != null ) return System.env.API_KEY
    Properties props = new Properties()
    props.load(new FileInputStream(new File(rootProject.rootDir,'secrets.properties')))
    return props['API_KEY']
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.4.0"
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    //noinspection GradleDependency
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.3'
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.google.android.gms:play-services-location:19.0.1'
    implementation 'com.google.code.gson:gson:2.8.9'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.2"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.2"
    implementation 'io.insert-koin:koin-core:3.1.4'
    implementation 'io.insert-koin:koin-android:3.1.4'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.jakewharton.timber:timber:5.0.1'
    testImplementation 'io.insert-koin:koin-test:3.1.4'
    testImplementation 'io.insert-koin:koin-test-junit4:3.1.4'
    testImplementation "io.mockk:mockk:1.12.1"
    testImplementation "org.robolectric:robolectric:4.7.3"
    testImplementation 'junit:junit:4.13.2'
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'
}

configurations.all{
    resolutionStrategy {
        eachDependency { details ->
            if ('org.jacoco' == details.requested.group) {
                details.useVersion "0.8.7"
            }
        }
    }
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*',
                      '**/*Test*.*', 'android/**/*.*']

    def debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"


    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ]))
}
